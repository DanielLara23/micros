#include <avr/io.h>
#include <util/delay.h>

// Frecuencia del reloj de 16MHz para Arduino Nano
#define F_CPU 16000000UL
// Velocidad de comunicación en bauds
#define BAUDRATE 9600
// UBRRn = (f_OSC / (16 * BAUD)) - 1  (para modo asíncrono normal), sin embargo, para evitar el desbordamiento de entero se usa el 16UL
#define BAUD_PRESCALER (((F_CPU / (BAUDRATE * 16UL))) - 1)

void USART_Init(void)
{
    // Se carga el valor calculado en los dos registros de 8 bits UBRR0H y UBRR0L.
    UBRR0H = (unsigned char)(BAUD_PRESCALER >> 8);
    UBRR0L = (unsigned char)BAUD_PRESCALER;

    // Se activa el bit TXEN0 en el registro de control UCSR0B.
    UCSR0B = (1 << TXEN0);

    // En el registro UCSR0C, se activan los bits UCSZ01 y UCSZ00 para 8 bits de datos.
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

void USART_Transmit(unsigned char data)
{
    // Espera hasta que el búfer de transmisión esté listo para un nuevo dato.
    while (!(UCSR0A & (1 << UDRE0)));

    // Una vez que el búfer está libre, se carga el dato en el registro UDR0.
    UDR0 = data;
}

void USART_SendString(const char *str)
{
    // Itera sobre cada carácter de la cadena hasta encontrar el carácter nulo ('\0')
    while (*str)
    {
        USART_Transmit(*str++);
    }
}

int main(void)
{
    USART_Init();

    // Bucle infinito para la operación continua
    while (1)
    {
        // Llama a la función para transmitir la cadena "HOLA MUNDO"
        USART_SendString("HOLA MUNDO");
        
        USART_SendString("\r\n");
        
        _delay_ms(1000);
    }
    
    return 0;
}
